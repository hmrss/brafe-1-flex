/*

O flexbox foi criado para facilitar o posicionamento de componentes,
principalmente quando você não sabe a largura e a altura do mesmo.

Tudo começa com o display: flex; no elemento pai.
A interação é baseada na relação entre o elemento pais e os filhos.

Sendo o pai um container e os filhos items do container.

*/

/* CONTAINER */

/* O display flex no container, fará 
com que os filhos diretos se comportem como elementos flex */

/* https://css-tricks.com/snippets/css/a-guide-to-flexbox/ */
.container {
  display: flex;
}

/* Define a direção dos itens filho */
.container {
  flex-direction: row | row-reverse | column | column-reverse;
}

/* Define se a linha quebra ou não */
/* nowrap - O tamanho mínimo é definido pelo conteúdo dos itens do container */
/* wrap - Usa o tamanho máximo do conteúdo */
.container {
  flex-wrap: nowrap | wrap | wrap-reverse;
}

/* Define a distribuição horizontal do conteúdo */
.container {
  justify-content: flex-start | flex-end | center | space-between | space-around;
}

/* Define o alinhamento dos itens */
/* Caso não usar o align-items - A altura dos itens ficam igual (baseado no
item com a maior altura */
/* Caso usar o align-items - O item ocupa a altura máxima do conteúdo */
.container {
  align-items: flex-start | flex-end | center | baseline | stretch;
}

/* Define a distribuição vertical do conteúdo */
.container {
  align-content: flex-start | flex-end | center | space-between | space-around |
    stretch;
}

/* ITEMS */

/* Define a ordem do item */
/* Por padrão segue a ordem dos itens no HTML */
.item {
  order: 1;
}

/* Define a proporção do item (Se eles se expandem ou não)*/
/* flex-grow = 0 Os itens ocupam o mínimo possível da largura (seu conteudo) */
/* flex-grow = 1 Os itens tentam ocupar o mesmo tanto de largura */
.item {
  flex-grow: 1; /* 0 é o padrão */
}

/* Define a capacidade de encolher do item */
.item {
  flex-shrink: 1; /* 1 é o padrão */
}

/* Define um valor base para o item */
/* 0 -  terá o tamanho mínimo possível baseado no conteudo. É necessário
utilizar basis 0 para poder influenciar no tamanho dos outros itens.
Ou seja, é necessário definir basis 0 para poder aumentar ou diminuir os outros
itens com flex-grow.
flex-grow: 1;
flex-basis: 0; 
*/
.item {
  flex-basis: 200px | auto; /* default auto */
}

/* Atalhos para os itens acima */
.item {
  flex: none | [ < 'flex-grow' > < 'flex-shrink' >? || < 'flex-basis' > ];
}

/* Define o alinhamento do item */
/* Ao utilizar, a altura do item fica de acordo com o próprio conteudo, e não
mais do item com o maior conteudo */
.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}
